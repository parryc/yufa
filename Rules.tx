/*
 * The basic RULE framework
 */

Rule:
  'rule' name=ID ':'
    steps*=Step
  ('inflect:'
    inflections*=Inflection)?
  ('inflection groups:'
    inflection_groups*=InflectionBlock)?
  ('exceptions:'
    exceptions*=ExceptionBlock)?
;

/*
 * Different types of steps 
 * Steps are the lowest level action a conjugation can
 * prescribe.
 */

Step:
  Set | Remove | If
;

Set:
  'set' status=STRING 'to'? value=STRING? 'if' action=Action
;

If:
  'if' condition=STRING 'is'? value=STRING? 'then' action=Action
;

Remove:
  'remove' what+=What
;

/*
 * Actions describe what should be done as a result of one
 * of the steps above
 */

Action:
  STRING | EndsWith | Double | Change | Remove | Otherwise | Is
;

EndsWith:
  'ends with' what+=What
;

Double:
  'double' what+=What
;

Otherwise:
  'otherwise'
;

Is:
  'is' what+=What
;

Change:
  'change' what+=What 'to' to=STRING
;

/*
 * What is...well, what you should look for!
 * Remove What? Is What? Ends With What? etc. 
 */

What:
  Last | And | Or | Text
;

Text:
  OrthographyPart | STRING
;

Last:
  'last' string+=Text
;

And:
  '+'? string+=Text
;

Or:
  '+'? '(' string+=Text ')'
;

/*
 * The different parts of a inflection
 * description
 * basically token (Pronoun)/value (Output) pairs
 */

InflectionBlock:
  'group' group*=STRING
  inflections*=Inflection
;

Inflection:
  type=Pronoun ':' inflection_parts+=InflectionText exception=AdHocException?
;

InflectionText:
  Nothing | Base | And | Text 
;

Base:
  'base'
;

Nothing:
  'nothing'
;

AdHocException:
  'unless' attribute=STRING 'is' value=STRING 'then' alternative+=InflectionText
;

/*
 * Describing an exception to the inflection rule
 */

ExceptionBlock:
  '-' base_word=STRING
  exceptions*=Exception
;

Exception:
  type=Pronoun ':' override=STRING
;


/*
 * These are miscellaneous constraints on
 * what can appear in the rules as references
 */

Pronoun:
  '1sg' | '2sg' | '3sg' | '1pl' | '2pl' | '3pl'
;

OrthographyPart:
  'C' | 'V'
;





